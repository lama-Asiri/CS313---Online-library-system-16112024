-- Dropping tables if they exist
DROP TABLE  UserTable CASCADE CONSTRAINT;
CREATE TABLE UserTable (
    userName VARCHAR(30) NOT NULL,
    email VARCHAR(50) PRIMARY KEY,
    userPassword VARCHAR(100) NOT NULL,
    gender VARCHAR(6) CHECK (gender IN ('male', 'female')) NOT NULL,
    phoneNo CHAR(12),
    userRole VARCHAR(20) CHECK (userRole IN ('Admin', 'Librarian', 'Student')) NOT NULL
);

DROP TABLE  Administrator CASCADE CONSTRAINT;
CREATE TABLE Administrator (
    adminEmail VARCHAR(50) PRIMARY KEY REFERENCES UserTable(email) ON DELETE CASCADE,
    assignedDepartment VARCHAR(100) NOT NULL
);

DROP TABLE  Librarian CASCADE CONSTRAINT;
CREATE TABLE Librarian (
    librarianEmail VARCHAR(50) PRIMARY KEY REFERENCES UserTable(email)ON DELETE CASCADE,
    libraryBranch VARCHAR(100) NOT NULL
);

DROP TABLE Student CASCADE CONSTRAINT;
CREATE TABLE Student (
    studentEmail VARCHAR(50) PRIMARY KEY REFERENCES UserTable(email)ON DELETE CASCADE
);

DROP TABLE  Book CASCADE CONSTRAINT;
CREATE TABLE Book (
    title VARCHAR(200) NOT NULL,
    bookID VARCHAR(20) PRIMARY KEY,
    author VARCHAR(100) NOT NULL,
    genre VARCHAR(50)  CHECK (genre IN ('fantasy', 'science fiction','romance','mestrey','horror'))NOT NULL ,
    isAvailable VARCHAR(10) CHECK (isAvailable IN ('available', 'not available')) NOT NULL
);

DROP TABLE  Loan CASCADE CONSTRAINT;
CREATE TABLE Loan (
    userEmail VARCHAR(50) REFERENCES Student(studentEmail)ON DELETE CASCADE,
    bookId VARCHAR(20) REFERENCES Book(bookID),
    loanID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    loanDate DATE NOT NULL,
    maxReturnDate DATE,  -- New column for the maximum return date
    returnDate DATE,     -- Actual return date
    status VARCHAR(20) CHECK (status IN ('pending', 'approved', 'rejected'))
);
-- Insert Admin account
CREATE OR REPLACE TRIGGER InsertUserRoleTables
AFTER INSERT ON UserTable
FOR EACH ROW
BEGIN
    -- For Student Role
    IF :NEW.userRole = 'Student' THEN
        INSERT INTO Student (studentEmail)
        VALUES (:NEW.email);
    
    -- For Admin Role
    ELSIF :NEW.userRole = 'Admin' THEN
        INSERT INTO Administrator (adminEmail, assignedDepartment)
        VALUES (:NEW.email, 'Default Department'); -- You can set a default or leave it as NULL if needed
    
    -- For Librarian Role
    ELSIF :NEW.userRole = 'Librarian' THEN
        INSERT INTO Librarian (librarianEmail, libraryBranch)
        VALUES (:NEW.email, 'Default Branch'); -- Set a default library branch or leave it NULL if required
    END IF;
END;
/

INSERT INTO UserTable (userName, email, userPassword, gender, phoneNo, userRole) 
VALUES ('Lama', 'lama@admin.com', 'admin', 'female', '1234567890', 'Admin');

INSERT INTO UserTable (userName, email, userPassword, gender, phoneNo, userRole) 
VALUES ('a', 'a@a.a', 'a', 'female', '1234567890', 'Librarian');
 
INSERT INTO Book (title, bookID, author, genre, isAvailable)
VALUES ('The Hobbit', 'B001', 'J.R.R. Tolkien', 'fantasy', 'available');
INSERT INTO Book (title, bookID, author, genre, isAvailable)
VALUES ('1984', 'B002', 'George Orwell', 'science fiction', 'available');
INSERT INTO Book (title, bookID, author, genre, isAvailable)
VALUES ('The Da Vinci Code', 'B004', 'Dan Brown', 'mestrey', 'available'); 
INSERT INTO Book (title, bookID, author, genre, isAvailable)
VALUES ('Dracula', 'B005', 'Bram Stoker', 'horror', 'available');
INSERT INTO Book (title, bookID, author, genre, isAvailable)
VALUES ('1984', 'B003', 'George dd', 'science fiction', 'available');
INSERT INTO UserTable (userName, email, userPassword, gender, phoneNo, userRole) 
VALUES ('st', 'st@ex.com', '123', 'female', '1234567890', 'Student');

 --INSERT INTO Loan (userEmail, bookId, loanDate, status)
--VALUES ('st@ex.com', 'B003', SYSDATE, 'pending');

-- Example Insert for testing an overdue loan
--INSERT INTO Loan (userEmail, bookId, loanDate, status, returnDate)
--VALUES ('st@ex.com', 'B003', SYSDATE - 10, 'approved', SYSDATE - 5);
-- Insert a test loan where returnDate is overdue by 2 days
INSERT INTO Loan (userEmail, bookId, loanDate, maxReturnDate, returnDate, status)
VALUES (
    'st@ex.com',  -- Student email
    'B003',       -- Book ID (assuming this book exists)
    SYSDATE,      -- Loan date (current date)
    SYSDATE + 14, -- maxReturnDate = loanDate + 14 days
    SYSDATE + 16, -- returnDate = loanDate + 16 days (overdue by 2 days)
    'approved'    -- Status (approved)
);

SELECT loanId, maxReturnDate, returnDate 
FROM Loan 
WHERE returnDate > maxReturnDate;


SELECT * FROM Loan WHERE returnDate > maxReturnDate;







